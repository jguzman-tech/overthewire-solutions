I attempted this lab. I've found links online for several decompilers. IDA Pro
is supposed to be the best one however it costs money. I tried installing retdec
via snap. It was highly recommended online, is open source, and is free. I also
installed it by downloading the zip from github but I could not figure out how
to execute it from there afterwards.

To execute it on my machine I did:

/snap/retdec/1/bin/retdec-decompiler.py <elf-file>

The 326c15f8884fcc13d18a60e2fb933b0e35060efa8a44214e06d589e4e235fe34 which was
provided for this lab is an elf file by the way. The problem is that it's 64-bit
and the retdec version that was at least included in snap cannot interpret
64-bit elf files, only 32-bit ones.

So, I'm moving on. After advent is over all will be revealed. I can look into
whatever writeup is posted.

Outside help is prohibited for these advent challenges because it's supposed to
be a team competition. So no help on the irc channel. And ppl might roast you on
reddit for asking for spoilers.

I followed the steps on the link here to execute my code instruction by
instruction:

https://reverseengineering.stackexchange.com/questions/3815/reversing-elf-64-bit-lsb-executable-x86-64-gdb

Use istep or inext to execute a single instruction once you find the start
point. I noticed that it was looping a good number of times from 4006d0 to
400727. I made comments in executable.asm. However I just could not understand
what the assembly was doing. And there is apparently data loss when you generate
a human-readable via objdump so I will probably not be able to edit the
executeable.asm and re-compile into elf 64-bit. I am very interested in this
write up. Hopefully it won't be too technical for me.

I will prioritize the labs with the highest number of solves.

December 23rd update:

* This is the proper way to set memory:

(gdb) whatis *0x7fffffffe338 returns int, which is 32-bits wide on x86_64.
set *(int64_t *)0x7fffffffe338 = 0x7fffffffe130

* Set a break at memory address with:

(gdb) break *<hex-address>

* I'm pretty sure that the mistake would have to be in the main portion of the
  assembly.

* The 40058e instruction seems to be the culprit. It sets the rcx register to
  $0x112210f47de98115. I'm pretty sure this is just a literal value. It is the
  int value 1234567890123456789. Which seems very arbitrary.

* IMPORTANT: My idea is to loop through possible alternative values of rcx and
  see which one gives me readable ascii. Hopefully the answer is the smallest
  possible value.

** You should be able to execute a set of gdb instructions via a script

*** see:
    https://stackoverflow.com/questions/14226563/how-to-read-and-execute-gdb-commands-from-a-file

*** If this works then you can grep the output somehow and check that AOTW{}
    contains only printable characters.

* There are only 3 jump instructions within main. They are all jne
  instructions. 

* Output from 1-1000 run:

joseph@joseph-ThinkPad-E580:~/overthewire-solutions/advent-2019/day10$ ./find_right_rcx.sh 
Match on attempt 56
Match on attempt 253
Match on attempt 260
Match on attempt 274
Match on attempt 367
Match on attempt 452
Match on attempt 634
Match on attempt 684
Match on attempt 749
Match on attempt 783
Match on attempt 825
Match on attempt 862
Match on attempt 871

* After about an hour I was able to make it through 7300 attempts.

** This is likely not the real solution.
